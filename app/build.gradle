apply plugin: 'com.android.application'
apply plugin: 'witness'

android {
    compileSdkVersion Integer.parseInt(project.ANDROID_BUILD_SDK_VERSION as String)
    buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION as String
    defaultConfig {
        versionCode 4745227
        versionName '0.9.19'
        minSdkVersion 9
        targetSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION as String)

        // For Espresso
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    signingConfigs {
        release
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
        debug {
            applicationIdSuffix '.debug'
            versionNameSuffix '-DEBUG'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    lintOptions {
        abortOnError false
    }
    packagingOptions {
        exclude 'LICENSE.txt'
    }
    productFlavors {
        free {
            applicationId 'net.i2p.android'
        }
        donate {
            applicationId 'net.i2p.android.donate'
        }
        legacy {
            applicationId 'net.i2p.android.router'
        }
    }
}

dependencies {
    // Local dependencies
    compile project(':routerjars')
    compile project(':client')

    // Android Support Repository dependencies
    compile 'com.android.support:support-v4:22.0.0'
    compile 'com.android.support:appcompat-v7:22.0.0'
    compile 'com.android.support:recyclerview-v7:22.0.0'

    // Remote dependencies
    compile 'net.i2p.android.ext:floatingactionbutton:1.9.0'
    compile files('libs/androidplot-core-0.6.1.jar')
    compile ('com.android.support:support-v4-preferencefragment:1.0.0@aar'){
        exclude module: 'support-v4'
    }
    compile 'com.pnikosis:materialish-progress:1.4'
    compile 'com.eowise:recyclerview-stickyheaders:0.5.2@aar'

    // Testing-only dependencies
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.0'
    androidTestCompile 'com.android.support.test:testing-support-lib:0.1'
}

dependencyVerification {
    verify = [
            'com.android.support:support-v4:355a11466727e8ba00e239416aec55ac3cd3fb4ffc9d20c4a33373085c050bd1',
            'com.android.support:appcompat-v7:40114cb756fecffa4a51c5645593cf64509c576594f77e41e801368051115c7b',
            'com.android.support:recyclerview-v7:859ed80e3761f8fc3126901260b208505120b5678bcf36ad2cfe9c453958b9c7',
            'net.i2p.android.ext:floatingactionbutton:b41eae5fe6be599e3fade00273521b0914f2e199d5f04c50fa34cfe935347f76',
            'com.android.support:support-v4-preferencefragment:5470f5872514a6226fa1fc6f4e000991f38805691c534cf0bd2778911fc773ad',
            'com.pnikosis:materialish-progress:5dd770a78047d8dbf2690deb686675fe2b242a6d06bb52ef425c829454ca54b8',
            'com.eowise:recyclerview-stickyheaders:7b236da49b33b840e9ba6e7e4182218d1a2d9047236fdbc3ca947352f9b0883b',
    ]
}

project.ext.i2pbase = '../i2p.i2p'
def Properties props = new Properties()
def propFile = new File(project(':routerjars').projectDir, 'local.properties')

if (propFile.canRead()) {
    props.load(new FileInputStream(propFile))

    if (props != null &&
            props.containsKey('i2psrc')) {
        i2pbase = props['i2psrc']
    } else {
        println 'local.properties found but some entries are missing'
    }
} else {
    println 'local.properties not found'
}

task certificatesZip(type: Zip) {
    archiveName = 'certificates_zip'
    from files('' + i2pbase + '/installer/resources/certificates')
}
task copyI2PResources(type: Copy) {
    // Force this to always run: Copy only detects source changes, not if missing in destination
    outputs.upToDateWhen { false }
    into 'src/main/res'
    into('drawable') {
        from file(i2pbase + '/installer/resources/themes/console/images/i2plogo.png')
    }
    into('raw') {
        from(i2pbase + '/installer/resources/blocklist.txt') { rename { 'blocklist_txt' } }
        from(i2pbase + '/installer/resources/hosts.txt') { rename { 'hosts_txt' } }
        from('../LICENSE.txt') { rename { 'license_app_txt' } }
        from('../licenses/LICENSE-Apache2.0.txt') { rename { 'license_apache20_txt' } }
        from(i2pbase + '/licenses') {
            include { elem ->
                elem.name in [
                        'LICENSE-ElGamalDSA.txt',
                        'LICENSE-SHA256.txt',
                        'LICENSE-BSD.txt',
                        'LICENSE-SNTP.txt',
                        'LICENSE-LGPLv2.1.txt',
                        'LICENSE-InstallCert.txt',
                        'LICENSE-BlockFile.txt',
                        'LICENSE-GPLv2.txt',
                        'LICENSE-GPLv3.txt',
                        'LICENSE-LGPLv3.txt',
                        'LICENSE-FatCowIcons.txt',
                        'LICENSE-Addressbook.txt',
                ]
            }
            rename { String name ->
                String part = name.substring(8, name.lastIndexOf('.txt'))
                String.format('license_%s_txt',
                        part.toLowerCase(Locale.US).replace('.', '_'))
            }
        }
        from certificatesZip
    }
}
// For peers WebView
task copyI2PAssets(type: Copy) {
    // Force this to always run: Copy only detects source changes, not if missing in destination
    outputs.upToDateWhen { false }
    into 'src/main/assets/themes/console'
    into('images') {
        from file(i2pbase + '/installer/resources/themes/console/images/i2plogo.png')
        from file(i2pbase + '/installer/resources/themes/console/images/inbound.png')
        from file(i2pbase + '/installer/resources/themes/console/images/outbound.png')
    }
    into('light') {
        from file(i2pbase + '/installer/resources/themes/console/light/console.css')
    }
    into('light/images') {
        from file(i2pbase + '/installer/resources/themes/console/light/images/header.png')
    }
}

preBuild.dependsOn copyI2PResources
preBuild.dependsOn copyI2PAssets

task cleanI2PResources(type: Delete) {
    delete file('src/main/res/drawable/i2plogo.png')
    delete fileTree('src/main/res/raw') {
        include 'blocklist_txt'
        include 'hosts_txt'
        include 'license_*'
        include 'certificates_zip'
    }
}
task cleanI2PAssets(type: Delete) {
    delete fileTree('src/main/assets/themes/console/images')
    delete file('src/main/assets/themes/console/light/console.css')
    delete file('src/main/assets/themes/console/light/images/header.png')
}

clean.dependsOn cleanI2PResources
clean.dependsOn cleanI2PAssets

props = new Properties()
propFile = new File(project.rootDir, 'signing.properties')

if (propFile.canRead()) {
    props.load(new FileInputStream(propFile))

    if (props != null &&
            props.containsKey('STORE_FILE') &&
            props.containsKey('STORE_PASSWORD') &&
            props.containsKey('KEY_ALIAS') &&
            props.containsKey('KEY_PASSWORD')) {
        android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
        android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
        android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
    } else {
        println 'signing.properties found but some entries are missing'
        android.buildTypes.release.signingConfig = null
    }
} else {
    println 'signing.properties not found'
    android.buildTypes.release.signingConfig = null
}

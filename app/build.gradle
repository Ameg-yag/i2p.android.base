apply plugin: 'android'
apply plugin: 'witness'

android {
    compileSdkVersion 19
    buildToolsVersion '19.1.0'
    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 19
    }
    signingConfigs {
        release
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
            runProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
    lintOptions {
        abortOnError false
    }
    productFlavors {
        free {
            applicationId 'net.i2p.android'
        }
        donate {
            applicationId 'net.i2p.android.donate'
        }
    }
}

dependencies {
    compile project(':routerjars')
    compile project(':client')
    compile 'com.android.support:support-v4:19.1.0'
    compile 'com.android.support:appcompat-v7:19.1.0'
    compile files('libs/androidplot-core-0.6.0.jar')
}

dependencyVerification {
    verify = [
            'com.android.support:support-v4:3f40fa7b3a4ead01ce15dce9453b061646e7fe2e7c51cb75ca01ee1e77037f3f',
            'com.android.support:appcompat-v7:9df7637c5219202ddbbbf0924c2d5a9e6d64379166795a89d8f75d1e3f3372df',
    ]
}

project.ext.i2pbase = '../i2p.i2p'
def Properties props = new Properties()
def propFile = new File(project(':routerjars').projectDir, 'local.properties')

if (propFile.canRead()) {
    props.load(new FileInputStream(propFile))

    if (props != null &&
            props.containsKey('i2psrc')) {
        i2pbase = props['i2psrc']
    } else {
        println 'local.properties found but some entries are missing'
    }
} else {
    println 'local.properties not found'
}

task certificatesZip(type: Zip) {
    archiveName = 'certificates_zip'
    from files('' + i2pbase + '/installer/resources/certificates')
}
task copyI2PResources(type: Copy) {
    into 'src/main'
    into('res/drawable') {
        from file(i2pbase + '/installer/resources/themes/console/images/i2plogo.png')
    }
    into('res/raw') {
        from(i2pbase + '/installer/resources/blocklist.txt') { rename {'blocklist_txt' } }
        from(i2pbase + '/installer/resources/hosts.txt') { rename {'hosts_txt' } }
        from('../LICENSE.txt') { rename {'license_app_txt' } }
        from('../licenses/LICENSE-Apache2.0.txt') { rename {'license_apache20_txt' } }
        from(i2pbase + '/licenses') {
            include { elem ->
                elem.name in [
                        'LICENSE-ElGamalDSA.txt',
                        'LICENSE-SHA256.txt',
                        'LICENSE-BSD.txt',
                        'LICENSE-SNTP.txt',
                        'LICENSE-LGPLv2.1.txt',
                        'LICENSE-InstallCert.txt',
                        'LICENSE-BlockFile.txt',
                        'LICENSE-GPLv2.txt',
                        'LICENSE-GPLv3.txt',
                        'LICENSE-LGPLv3.txt',
                        'LICENSE-FatCowIcons.txt',
                        'LICENSE-Addressbook.txt',
                ]
            }
            rename { String name ->
                String part = name.substring(8, name.lastIndexOf('.txt'))
                String.format('license_%s_txt',
                        part.toLowerCase(Locale.US).replace('.', '_'))
            }
        }
        from certificatesZip
    }
}
task cleanI2PResources(type: Delete) {
    delete file('src/main/res/drawable/i2plogo.png')
    delete fileTree('src/main/res/raw') {
        include 'blocklist_txt'
        include 'hosts_txt'
        include 'license_*'
        include 'certificates_zip'
    }
}
preBuild.dependsOn copyI2PResources
clean.dependsOn cleanI2PResources

props = new Properties()
propFile = new File(project.rootDir, 'signing.properties')

if (propFile.canRead()) {
    props.load(new FileInputStream(propFile))

    if (props != null &&
            props.containsKey('STORE_FILE') &&
            props.containsKey('STORE_PASSWORD') &&
            props.containsKey('KEY_ALIAS') &&
            props.containsKey('KEY_PASSWORD')) {
        android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
        android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
        android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
    } else {
        println 'signing.properties found but some entries are missing'
        android.buildTypes.release.signingConfig = null
    }
} else {
    println 'signing.properties not found'
    android.buildTypes.release.signingConfig = null
}

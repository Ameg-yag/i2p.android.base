apply plugin: 'com.android.application'
apply plugin: 'witness'

android {
    compileSdkVersion Integer.parseInt(project.ANDROID_BUILD_SDK_VERSION)
    buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION
    defaultConfig {
        versionCode 4745223
        versionName '0.9.16-rc1'
        minSdkVersion 9
        targetSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)
    }
    signingConfigs {
        release
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
            runProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
    lintOptions {
        abortOnError false
    }
    productFlavors {
        free {
            applicationId 'net.i2p.android'
        }
        donate {
            applicationId 'net.i2p.android.donate'
        }
        legacy {
            applicationId 'net.i2p.android.router'
        }
    }
}

dependencies {
    compile project(':routerjars')
    compile project(':client')
    compile 'com.android.support:support-v4:21.0.2'
    compile 'com.android.support:appcompat-v7:21.0.2'
    compile 'com.android.support:recyclerview-v7:21.0.2'
    compile 'com.android.support:cardview-v7:21.0.2'
    compile files('libs/androidplot-core-0.6.1.jar')
}

dependencyVerification {
    verify = [
            'com.android.support:support-v4:126a4c291f41f75f3fff4968e9d397bc8454cdff4d8f994cbe0524e3bad76e72',
            'com.android.support:appcompat-v7:b760fd3d0b0b0547a1bcef9031b40939f31049ba955f04c8fdc5aa09a25d19e9',
            'com.android.support:recyclerview-v7:71ef0f5659b3019dc33c5ffb346ea01df1f66735506f38d43fd783fbcb0370ce',
            'com.android.support:cardview-v7:cb4d7ee9ebb6edffa7203eff0d207b4e88425599a8ed37d94b650bc84390c4eb',
    ]
}

project.ext.i2pbase = '../i2p.i2p'
def Properties props = new Properties()
def propFile = new File(project(':routerjars').projectDir, 'local.properties')

if (propFile.canRead()) {
    props.load(new FileInputStream(propFile))

    if (props != null &&
            props.containsKey('i2psrc')) {
        i2pbase = props['i2psrc']
    } else {
        println 'local.properties found but some entries are missing'
    }
} else {
    println 'local.properties not found'
}

task copyDrawableResources(type: Copy) {
    from file(i2pbase + '/installer/resources/themes/console/images/i2plogo.png')
    into 'src/main/res/drawable'
}
task certificatesZip(type: Zip) {
    archiveName = 'certificates_zip'
    from files('' + i2pbase + '/installer/resources/certificates')
}
task copyRawResources(type:Copy) {
    from(i2pbase + '/installer/resources/blocklist.txt') { rename { 'blocklist_txt' } }
    from(i2pbase + '/installer/resources/hosts.txt') { rename { 'hosts_txt' } }
    from('../LICENSE.txt') { rename { 'license_app_txt' } }
    from('../licenses/LICENSE-Apache2.0.txt') { rename { 'license_apache20_txt' } }
    from(i2pbase + '/licenses') {
        include { elem ->
            elem.name in [
                    'LICENSE-ElGamalDSA.txt',
                    'LICENSE-SHA256.txt',
                    'LICENSE-BSD.txt',
                    'LICENSE-SNTP.txt',
                    'LICENSE-LGPLv2.1.txt',
                    'LICENSE-InstallCert.txt',
                    'LICENSE-BlockFile.txt',
                    'LICENSE-GPLv2.txt',
                    'LICENSE-GPLv3.txt',
                    'LICENSE-LGPLv3.txt',
                    'LICENSE-FatCowIcons.txt',
                    'LICENSE-Addressbook.txt',
            ]
        }
        rename { String name ->
            String part = name.substring(8, name.lastIndexOf('.txt'))
            String.format('license_%s_txt',
                    part.toLowerCase(Locale.US).replace('.', '_'))
        }
    }
    from certificatesZip
    into 'src/main/res/raw'
}
task copyI2PResources
copyI2PResources.dependsOn copyDrawableResources
copyI2PResources.dependsOn copyRawResources

// For peers WebView
task copyConsoleImagesAssets(type: Copy) {
    from file(i2pbase + '/installer/resources/themes/console/images/i2plogo.png')
    from file(i2pbase + '/installer/resources/themes/console/images/inbound.png')
    from file(i2pbase + '/installer/resources/themes/console/images/outbound.png')
    into 'src/main/assets/themes/console/images'
}
task copyConsoleLightAssets(type: Copy) {
    from file(i2pbase + '/installer/resources/themes/console/light/console.css')
    into 'src/main/assets/themes/console/light'
}
task copyConsoleLightImagesAssets(type: Copy) {
    from file(i2pbase + '/installer/resources/themes/console/light/images/header.png')
    into 'src/main/assets/themes/console/light/images'
}
task copyI2PAssets
copyI2PAssets.dependsOn copyConsoleImagesAssets
copyI2PAssets.dependsOn copyConsoleLightAssets
copyI2PAssets.dependsOn copyConsoleLightImagesAssets

preBuild.dependsOn copyI2PResources
preBuild.dependsOn copyI2PAssets

task cleanI2PResources(type: Delete) {
    delete file('src/main/res/drawable/i2plogo.png')
    delete fileTree('src/main/res/raw') {
        include 'blocklist_txt'
        include 'hosts_txt'
        include 'license_*'
        include 'certificates_zip'
    }
}
task cleanI2PAssets(type: Delete) {
    delete fileTree('src/main/assets/themes/console/images')
    delete file('src/main/assets/themes/console/light/console.css')
    delete file('src/main/assets/themes/console/light/images/header.png')
}

clean.dependsOn cleanI2PResources
clean.dependsOn cleanI2PAssets

props = new Properties()
propFile = new File(project.rootDir, 'signing.properties')

if (propFile.canRead()) {
    props.load(new FileInputStream(propFile))

    if (props != null &&
            props.containsKey('STORE_FILE') &&
            props.containsKey('STORE_PASSWORD') &&
            props.containsKey('KEY_ALIAS') &&
            props.containsKey('KEY_PASSWORD')) {
        android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
        android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
        android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
    } else {
        println 'signing.properties found but some entries are missing'
        android.buildTypes.release.signingConfig = null
    }
} else {
    println 'signing.properties not found'
    android.buildTypes.release.signingConfig = null
}

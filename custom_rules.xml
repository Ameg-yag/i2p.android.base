<?xml version="1.0" encoding="UTF-8"?>
<project name="imported">

    <!-- override with i2psrc=path/to/source in local.properties -->
    <property name="i2psrc" value="../i2p.i2p" />
    <property name="i2pbase" location="${i2psrc}" />
    <available file="${i2psrc}" property="i2p.present" />
    <fail message="I2P source directory ${i2psrc} was not found. Install it there or set i2psrc=/path/to/source in local.properties" >
        <condition>
            <not>
                <isset property="i2p.present" />
            </not>
        </condition>
    </fail>
    <echo message="Using I2P source at ${i2pbase}" />


    <buildnumber file="scripts/build.number" />
    <!-- this loads my.version.code and my.version.name -->
    <property file="scripts/version.properties" />
    <property name="version.code" value="${my.version.code}" />
    <property name="version.name" value="${my.version.name}" />
    <echo message="version.code '${version.code}', 'version.name '${version.name}', '${my.version.name}'" />

    <!--
         ================================================================================
         New I2P rules
         ================================================================================
    -->

    <!--
        You must execute this target manually to increment the build number.
        Sorry if this is an extra step.

	TO-DO: Move this to js so that it is cross-platform.
	-*- Sponge
    -->

    <target name="incrementBuild" >
        <exec executable="sh" osfamily="unix" failonerror="true">
            <arg value="-c" />
            <arg value="scripts/setversion.sh ${i2pbase}" />
        </exec>

    </target>

    <!-- overrides of those in main_rules.xml -->

    <target name="-pre-build" depends="copy-i2p-resources" >
        <!-- aapt messes up when resources are added or deleted, just build every time -->
        <delete dir="${gen.absolute.dir}/net" verbose="${verbose}" />
        <!-- screw it, do the classes too, until I add the depend class -->
        <delete dir="${out.absolute.dir}/classes/net" verbose="${verbose}" />
    </target>

<!--
    <target name="-pre-compile" depends="jbigi, buildrouter" />

    <target name="-post-compile" depends="hackcleanup" />
-->
    <!--
         Creates the output directories if they don't exist yet.
    -->
    <target name="-dirs">
        <echo>Creating output directories if needed...</echo>
        <mkdir dir="${resource.absolute.dir}" />
        <mkdir dir="${gen.absolute.dir}" />
        <mkdir dir="${out.absolute.dir}" />
        <mkdir dir="${out.classes.absolute.dir}" />
    </target>

    <!-- some resources -->
    <target name="copy-i2p-resources" depends="-dirs" >
        <copy file="LICENSE.txt" tofile="res/raw/license_app_txt" />
        <copy file="licenses/LICENSE-Apache2.0.txt" tofile="res/raw/license_apache20_txt" />
        <copy file="${i2pbase}/installer/resources/themes/console/images/i2plogo.png" todir="res/drawable/" />
        <copy file="${i2pbase}/installer/resources/themes/console/images/outbound.png" todir="res/drawable/" />
        <copy file="${i2pbase}/installer/resources/themes/console/images/inbound.png" todir="res/drawable/" />
        <copy file="${i2pbase}/installer/resources/themes/console/light/images/header.png" todir="res/drawable/" />
        <copy file="${i2pbase}/installer/resources/themes/console/light/console.css" tofile="res/raw/console_css" />
        <copy file="${i2pbase}/installer/resources/blocklist.txt" tofile="res/raw/blocklist_txt" />
        <copy file="${i2pbase}/installer/resources/hosts.txt" tofile="res/raw/hosts_txt" />
        <copy file="${i2pbase}/licenses/LICENSE-ElGamalDSA.txt" tofile="res/raw/license_elgamaldsa_txt" />
        <copy file="${i2pbase}/licenses/LICENSE-SHA256.txt" tofile="res/raw/license_sha256_txt" />
        <copy file="${i2pbase}/licenses/LICENSE-BSD.txt" tofile="res/raw/license_bsd_txt" />
        <copy file="${i2pbase}/licenses/LICENSE-SNTP.txt" tofile="res/raw/license_sntp_txt" />
        <copy file="${i2pbase}/licenses/LICENSE-LGPLv2.1.txt" tofile="res/raw/license_lgplv2_1_txt" />
        <copy file="${i2pbase}/licenses/LICENSE-InstallCert.txt" tofile="res/raw/license_installcert_txt" />
        <copy file="${i2pbase}/licenses/LICENSE-BlockFile.txt" tofile="res/raw/license_blockfile_txt" />
        <copy file="${i2pbase}/licenses/LICENSE-GPLv2.txt" tofile="res/raw/license_gplv2_txt" />
        <copy file="${i2pbase}/licenses/LICENSE-GPLv3.txt" tofile="res/raw/license_gplv3_txt" />
        <copy file="${i2pbase}/licenses/LICENSE-LGPLv3.txt" tofile="res/raw/license_lgplv3_txt" />
        <copy file="${i2pbase}/licenses/LICENSE-Addressbook.txt" tofile="res/raw/license_addressbook_txt" />
        <delete file="res/raw/certificates_zip" />
        <zip update="true" destfile="res/raw/certificates_zip">
            <fileset dir="${i2pbase}/installer/resources/certificates/" />
        </zip>

    </target>

    <!-- install now does both -->
    <target name="reinstall" depends="install" />

    <target name="distclean" depends="clean">
        <delete dir="${jar.libs.dir}" verbose="${verbose}" />
        <delete file="res/drawable/i2plogo.png" verbose="${verbose}"/>
        <delete file="res/drawable/outbound.png" verbose="${verbose}"/>
        <delete file="res/drawable/inbound.png" verbose="${verbose}"/>
        <delete file="res/drawable/header.png" verbose="${verbose}"/>
        <delete file="res/raw/console_css" verbose="${verbose}"/>
        <delete file="res/raw/blocklist_txt" verbose="${verbose}" />
        <delete file="res/raw/hosts_txt" verbose="${verbose}" />
        <delete file="res/raw/license_app_txt" />
        <delete file="res/raw/license_apache20_txt" />
        <delete file="res/raw/license_elgamaldsa_txt" />
        <delete file="res/raw/license_sha256_txt" />
        <delete file="res/raw/license_bsd_txt" />
        <delete file="res/raw/license_sntp_txt" />
        <delete file="res/raw/license_lgplv2_1_txt" />
        <delete file="res/raw/license_installcert_txt" />
        <delete file="res/raw/license_blockfile_txt" />
        <delete file="res/raw/license_gplv2_txt" />
        <delete file="res/raw/license_gplv3_txt" />
        <delete file="res/raw/license_lgplv3_txt" />
        <delete file="res/raw/certificates_zip" />
        <delete file="scripts/build.number" verbose="${verbose}" />
        <delete file="scripts/version.properties" verbose="${verbose}" />
    </target>

    <!-- just to make it easier -->
    <target name="create-signing-keys" >
        <echo message="key store is ${key.store}" />
        <echo message="key store password is ${key.store.password}" />
        <echo message="key alias is ${key.alias}" />
        <input message="Enter common name for new key (your name): " addproperty="release.cn" />
        <fail message="You must enter a name" >
            <condition>
                <equals arg1="${release.cn}" arg2="" />
            </condition>
        </fail>
        <input message="Enter password for new key (6 characters minimum): " addproperty="release.password" />
        <fail message="You must enter a password" >
            <condition>
                <equals arg1="${release.password}" arg2="" />
            </condition>
        </fail>
        <echo message="Generating keys, this may take a while..." />
        <exec executable="keytool" inputstring="${release.password}${line.separator}${release.password}${line.separator}" osfamily="unix" failonerror="true">
            <arg value="-genkey" />
            <arg value="-v" />
            <arg value="-alias" />
            <arg value="${key.alias}" />
            <arg value="-keystore" />
            <arg value="${key.store}" />
            <arg value="-validity" />
            <arg value="10000" />
            <arg value="-keyalg" />
            <arg value="RSA" />
            <arg value="-keysize" />
            <arg value="4096" />
            <arg value="-storepass" />
            <arg value="${key.store.password}" />
            <arg value="-dname" />
            <arg value="cn=${release.cn}, ou=Apps, o=I2P, c=DE" />
        </exec>
        <echo message="Created keys:" />
        <exec executable="keytool" inputstring="android${line.separator}" osfamily="unix" failonerror="true">
            <arg value="-list" />
            <arg value="-v" />
            <arg value="-alias" />
            <arg value="${key.alias}" />
            <arg value="-keystore" />
            <arg value="${key.store}" />
        </exec>
        <echo message="BACK UP your key store file ${key.store} and your password!" />
    </target>

    <target name="verifyKeystore" >
        <available file="${key.store}" property="keystore.present" />
        <fail message="You must first create a keystore and keys with 'ant create-signing-keys'" >
            <condition>
                <not>
                    <isset property="keystore.present" />
                </not>
            </condition>
        </fail>
    </target>

    <target name="verifyWorkspace" >
        <echo message="Everything is checked in, right? Let's be sure:" />
        <exec executable="mtn" failonerror="true">
            <arg value="st" />
        </exec>
        <echo message="If there are any modified files above, stop now!" />
        <echo message="(except AndroidManifest.xml)" />
    </target>

    <target name="verify" depends="verifyKeystore, verifyWorkspace, release" >
        <exec executable="jarsigner" osfamily="unix" failonerror="true">
            <arg value="-verify" />
            <arg value="-verbose" />
            <arg value="-certs" />
            <arg value="${out.release.file}" />
        </exec>
        <echo message="" />
        <echo message="Release file is ${out.release.file}" />
        <echo message="Android version name: ${my.version.name}" />
        <echo message="Android version code: ${my.version.code}" />
        <echo message="File size:" />
        <exec executable="ls" failonerror="true">
            <arg value="-l" />
            <arg value="${out.release.file}" />
        </exec>
        <echo message="SHA256 sum:" />
        <exec executable="sha256sum" failonerror="true">
            <arg value="${out.release.file}" />
        </exec>
        <echo message="Don't forget to mtn ci AndroidManifest.xml" />
        <echo message="Don't forget to mtn tag w: android-${my.version.name}" />
        <copy file="${out.release.file}" tofile="I2PAndroid-${my.version.name}.apk" />
        <echo message="Release file copied to I2PAndroid-${my.version.name}.apk" />
    </target>
</project>
